package workshop.akbolatss.xchangesrates.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "CHART_DATA_INFO".
*/
public class ChartDataInfoDao extends AbstractDao<ChartDataInfo, Long> {

    public static final String TABLENAME = "CHART_DATA_INFO";

    /**
     * Properties of entity ChartDataInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Volume = new Property(1, Float.class, "volume", false, "VOLUME");
        public final static Property High = new Property(2, String.class, "high", false, "HIGH");
        public final static Property Change24 = new Property(3, Float.class, "change24", false, "CHANGE24");
        public final static Property Last = new Property(4, String.class, "last", false, "LAST");
        public final static Property Low = new Property(5, String.class, "low", false, "LOW");
        public final static Property Buy = new Property(6, String.class, "buy", false, "BUY");
        public final static Property Sell = new Property(7, String.class, "sell", false, "SELL");
        public final static Property Change = new Property(8, Float.class, "change", false, "CHANGE");
        public final static Property Started = new Property(9, String.class, "started", false, "STARTED");
        public final static Property Multiply = new Property(10, String.class, "multiply", false, "MULTIPLY");
        public final static Property Updated = new Property(11, String.class, "updated", false, "UPDATED");
        public final static Property Timestamp = new Property(12, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property InfoId = new Property(13, Long.class, "infoId", false, "INFO_ID");
    }


    public ChartDataInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChartDataInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHART_DATA_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"VOLUME\" REAL," + // 1: volume
                "\"HIGH\" TEXT," + // 2: high
                "\"CHANGE24\" REAL," + // 3: change24
                "\"LAST\" TEXT," + // 4: last
                "\"LOW\" TEXT," + // 5: low
                "\"BUY\" TEXT," + // 6: buy
                "\"SELL\" TEXT," + // 7: sell
                "\"CHANGE\" REAL," + // 8: change
                "\"STARTED\" TEXT," + // 9: started
                "\"MULTIPLY\" TEXT," + // 10: multiply
                "\"UPDATED\" TEXT," + // 11: updated
                "\"TIMESTAMP\" INTEGER," + // 12: timestamp
                "\"INFO_ID\" INTEGER);"); // 13: infoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHART_DATA_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChartDataInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float volume = entity.getVolume();
        if (volume != null) {
            stmt.bindDouble(2, volume);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(3, high);
        }
 
        Float change24 = entity.getChange24();
        if (change24 != null) {
            stmt.bindDouble(4, change24);
        }
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(5, last);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(6, low);
        }
 
        String buy = entity.getBuy();
        if (buy != null) {
            stmt.bindString(7, buy);
        }
 
        String sell = entity.getSell();
        if (sell != null) {
            stmt.bindString(8, sell);
        }
 
        Float change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(9, change);
        }
 
        String started = entity.getStarted();
        if (started != null) {
            stmt.bindString(10, started);
        }
 
        String multiply = entity.getMultiply();
        if (multiply != null) {
            stmt.bindString(11, multiply);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(12, updated);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(13, timestamp);
        }
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(14, infoId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChartDataInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float volume = entity.getVolume();
        if (volume != null) {
            stmt.bindDouble(2, volume);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(3, high);
        }
 
        Float change24 = entity.getChange24();
        if (change24 != null) {
            stmt.bindDouble(4, change24);
        }
 
        String last = entity.getLast();
        if (last != null) {
            stmt.bindString(5, last);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(6, low);
        }
 
        String buy = entity.getBuy();
        if (buy != null) {
            stmt.bindString(7, buy);
        }
 
        String sell = entity.getSell();
        if (sell != null) {
            stmt.bindString(8, sell);
        }
 
        Float change = entity.getChange();
        if (change != null) {
            stmt.bindDouble(9, change);
        }
 
        String started = entity.getStarted();
        if (started != null) {
            stmt.bindString(10, started);
        }
 
        String multiply = entity.getMultiply();
        if (multiply != null) {
            stmt.bindString(11, multiply);
        }
 
        String updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindString(12, updated);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(13, timestamp);
        }
 
        Long infoId = entity.getInfoId();
        if (infoId != null) {
            stmt.bindLong(14, infoId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChartDataInfo readEntity(Cursor cursor, int offset) {
        ChartDataInfo entity = new ChartDataInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // volume
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // high
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // change24
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // last
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // low
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // buy
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // sell
            cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8), // change
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // started
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // multiply
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // updated
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // timestamp
            cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13) // infoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChartDataInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setVolume(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setHigh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChange24(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setLast(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLow(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBuy(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSell(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setChange(cursor.isNull(offset + 8) ? null : cursor.getFloat(offset + 8));
        entity.setStarted(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMultiply(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpdated(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTimestamp(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setInfoId(cursor.isNull(offset + 13) ? null : cursor.getLong(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChartDataInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChartDataInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChartDataInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
