package workshop.akbolatss.xchangesrates.model.dao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.annotation.ToOne;

import java.util.List;
import org.greenrobot.greendao.annotation.NotNull;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "SNAPSHOT".
 */
@Entity(active = true)
public class Snapshot {

    @Id(autoincrement = true)
    private Long id;
    private String exchange;
    private String coin;
    private String currency;
    private String source;
    private Boolean isActiveForGlobal;
    private String timing;
    private Boolean isIntervalEnabled;
    private Integer IntervalNumber;
    private Integer IntervalType;
    private Boolean isNotifyPersistent;
    private long infoId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 2106570480)
    private transient SnapshotDao myDao;
    @ToOne(joinProperty = "infoId")
    private SnapshotInfo info;

    @Generated(hash = 1677168387)
    private transient Long info__resolvedKey;
    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "snapshotId")
    })
    private List<SnapshotChart> charts;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "snapshotId")
    })
    private List<SnapshotNotification> notifications;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 75701745)
    public Snapshot() {
    }

    public Snapshot(Long id) {
        this.id = id;
    }

    @Generated(hash = 2079370294)
    public Snapshot(Long id, String exchange, String coin, String currency, String source, Boolean isActiveForGlobal, String timing, Boolean isIntervalEnabled, Integer IntervalNumber, Integer IntervalType, Boolean isNotifyPersistent, long infoId) {
        this.id = id;
        this.exchange = exchange;
        this.coin = coin;
        this.currency = currency;
        this.source = source;
        this.isActiveForGlobal = isActiveForGlobal;
        this.timing = timing;
        this.isIntervalEnabled = isIntervalEnabled;
        this.IntervalNumber = IntervalNumber;
        this.IntervalType = IntervalType;
        this.isNotifyPersistent = isNotifyPersistent;
        this.infoId = infoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 808522748)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSnapshotDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getExchange() {
        return exchange;
    }

    public void setExchange(String exchange) {
        this.exchange = exchange;
    }

    public String getCoin() {
        return coin;
    }

    public void setCoin(String coin) {
        this.coin = coin;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public Boolean getIsActiveForGlobal() {
        return isActiveForGlobal;
    }

    public void setIsActiveForGlobal(Boolean isActiveForGlobal) {
        this.isActiveForGlobal = isActiveForGlobal;
    }

    public String getTiming() {
        return timing;
    }

    public void setTiming(String timing) {
        this.timing = timing;
    }

    public Boolean getIsIntervalEnabled() {
        return isIntervalEnabled;
    }

    public void setIsIntervalEnabled(Boolean isIntervalEnabled) {
        this.isIntervalEnabled = isIntervalEnabled;
    }

    public Integer getIntervalNumber() {
        return IntervalNumber;
    }

    public void setIntervalNumber(Integer IntervalNumber) {
        this.IntervalNumber = IntervalNumber;
    }

    public Integer getIntervalType() {
        return IntervalType;
    }

    public void setIntervalType(Integer IntervalType) {
        this.IntervalType = IntervalType;
    }

    public Boolean getIsNotifyPersistent() {
        return isNotifyPersistent;
    }

    public void setIsNotifyPersistent(Boolean isNotifyPersistent) {
        this.isNotifyPersistent = isNotifyPersistent;
    }

    public long getInfoId() {
        return infoId;
    }

    public void setInfoId(long infoId) {
        this.infoId = infoId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1428516855)
    public SnapshotInfo getInfo() {
        long __key = this.infoId;
        if (info__resolvedKey == null || !info__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SnapshotInfoDao targetDao = daoSession.getSnapshotInfoDao();
            SnapshotInfo infoNew = targetDao.load(__key);
            synchronized (this) {
                info = infoNew;
                info__resolvedKey = __key;
            }
        }
        return info;
    }

    public boolean isInfoNull() {
        if (info == null) {
            return true;
        } else {
            return false;
        }
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 2115838533)
    public void setInfo(@NotNull SnapshotInfo info) {
        if (info == null) {
            throw new DaoException("To-one property 'infoId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.info = info;
            infoId = info.getId();
            info__resolvedKey = infoId;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 1981426525)
    public List<SnapshotChart> getCharts() {
        if (charts == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SnapshotChartDao targetDao = daoSession.getSnapshotChartDao();
            List<SnapshotChart> chartsNew = targetDao._querySnapshot_Charts(id);
            synchronized (this) {
                if (charts == null) {
                    charts = chartsNew;
                }
            }
        }
        return charts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 432307170)
    public synchronized void resetCharts() {
        charts = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 1313120873)
    public List<SnapshotNotification> getNotifications() {
        if (notifications == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SnapshotNotificationDao targetDao = daoSession.getSnapshotNotificationDao();
            List<SnapshotNotification> notificationsNew = targetDao._querySnapshot_Notifications(id);
            synchronized (this) {
                if (notifications == null) {
                    notifications = notificationsNew;
                }
            }
        }
        return notifications;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 876516743)
    public synchronized void resetNotifications() {
        notifications = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

    public void setCharts(List<SnapshotChart> charts) {
        resetCharts();
        this.charts = charts;
    }

}
