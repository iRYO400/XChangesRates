package workshop.akbolatss.xchangesrates.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GLOBAL_NOTIFICATION".
*/
public class GlobalNotificationDao extends AbstractDao<GlobalNotification, Long> {

    public static final String TABLENAME = "GLOBAL_NOTIFICATION";

    /**
     * Properties of entity GlobalNotification.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsActive = new Property(1, Boolean.class, "isActive", false, "IS_ACTIVE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Hour = new Property(3, Integer.class, "hour", false, "HOUR");
        public final static Property Minutes = new Property(4, Integer.class, "minutes", false, "MINUTES");
        public final static Property ConditionIndex = new Property(5, Integer.class, "ConditionIndex", false, "CONDITION_INDEX");
        public final static Property ConditionValue = new Property(6, Integer.class, "ConditionValue", false, "CONDITION_VALUE");
        public final static Property IsVibrateOn = new Property(7, Boolean.class, "isVibrateOn", false, "IS_VIBRATE_ON");
        public final static Property IsSoundOn = new Property(8, Boolean.class, "isSoundOn", false, "IS_SOUND_ON");
        public final static Property IsLedOn = new Property(9, Boolean.class, "isLedOn", false, "IS_LED_ON");
    }


    public GlobalNotificationDao(DaoConfig config) {
        super(config);
    }
    
    public GlobalNotificationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GLOBAL_NOTIFICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_ACTIVE\" INTEGER," + // 1: isActive
                "\"NAME\" TEXT," + // 2: name
                "\"HOUR\" INTEGER," + // 3: hour
                "\"MINUTES\" INTEGER," + // 4: minutes
                "\"CONDITION_INDEX\" INTEGER," + // 5: ConditionIndex
                "\"CONDITION_VALUE\" INTEGER," + // 6: ConditionValue
                "\"IS_VIBRATE_ON\" INTEGER," + // 7: isVibrateOn
                "\"IS_SOUND_ON\" INTEGER," + // 8: isSoundOn
                "\"IS_LED_ON\" INTEGER);"); // 9: isLedOn
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GLOBAL_NOTIFICATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GlobalNotification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(2, isActive ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(4, hour);
        }
 
        Integer minutes = entity.getMinutes();
        if (minutes != null) {
            stmt.bindLong(5, minutes);
        }
 
        Integer ConditionIndex = entity.getConditionIndex();
        if (ConditionIndex != null) {
            stmt.bindLong(6, ConditionIndex);
        }
 
        Integer ConditionValue = entity.getConditionValue();
        if (ConditionValue != null) {
            stmt.bindLong(7, ConditionValue);
        }
 
        Boolean isVibrateOn = entity.getIsVibrateOn();
        if (isVibrateOn != null) {
            stmt.bindLong(8, isVibrateOn ? 1L: 0L);
        }
 
        Boolean isSoundOn = entity.getIsSoundOn();
        if (isSoundOn != null) {
            stmt.bindLong(9, isSoundOn ? 1L: 0L);
        }
 
        Boolean isLedOn = entity.getIsLedOn();
        if (isLedOn != null) {
            stmt.bindLong(10, isLedOn ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GlobalNotification entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Boolean isActive = entity.getIsActive();
        if (isActive != null) {
            stmt.bindLong(2, isActive ? 1L: 0L);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        Integer hour = entity.getHour();
        if (hour != null) {
            stmt.bindLong(4, hour);
        }
 
        Integer minutes = entity.getMinutes();
        if (minutes != null) {
            stmt.bindLong(5, minutes);
        }
 
        Integer ConditionIndex = entity.getConditionIndex();
        if (ConditionIndex != null) {
            stmt.bindLong(6, ConditionIndex);
        }
 
        Integer ConditionValue = entity.getConditionValue();
        if (ConditionValue != null) {
            stmt.bindLong(7, ConditionValue);
        }
 
        Boolean isVibrateOn = entity.getIsVibrateOn();
        if (isVibrateOn != null) {
            stmt.bindLong(8, isVibrateOn ? 1L: 0L);
        }
 
        Boolean isSoundOn = entity.getIsSoundOn();
        if (isSoundOn != null) {
            stmt.bindLong(9, isSoundOn ? 1L: 0L);
        }
 
        Boolean isLedOn = entity.getIsLedOn();
        if (isLedOn != null) {
            stmt.bindLong(10, isLedOn ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public GlobalNotification readEntity(Cursor cursor, int offset) {
        GlobalNotification entity = new GlobalNotification( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0, // isActive
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // hour
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // minutes
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // ConditionIndex
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // ConditionValue
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // isVibrateOn
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // isSoundOn
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isLedOn
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, GlobalNotification entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsActive(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1) != 0);
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHour(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setMinutes(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setConditionIndex(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setConditionValue(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsVibrateOn(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIsSoundOn(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsLedOn(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(GlobalNotification entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(GlobalNotification entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(GlobalNotification entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
