package workshop.akbolatss.xchangesrates.model.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SNAPSHOT_CHART".
*/
public class SnapshotChartDao extends AbstractDao<SnapshotChart, Long> {

    public static final String TABLENAME = "SNAPSHOT_CHART";

    /**
     * Properties of entity SnapshotChart.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Market = new Property(1, Float.class, "market", false, "MARKET");
        public final static Property High = new Property(2, String.class, "high", false, "HIGH");
        public final static Property Low = new Property(3, String.class, "low", false, "LOW");
        public final static Property Price = new Property(4, String.class, "price", false, "PRICE");
        public final static Property Timestamp = new Property(5, Long.class, "timestamp", false, "TIMESTAMP");
        public final static Property SnapshotId = new Property(6, long.class, "snapshotId", false, "SNAPSHOT_ID");
    }

    private Query<SnapshotChart> snapshot_ChartsQuery;

    public SnapshotChartDao(DaoConfig config) {
        super(config);
    }
    
    public SnapshotChartDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SNAPSHOT_CHART\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MARKET\" REAL," + // 1: market
                "\"HIGH\" TEXT," + // 2: high
                "\"LOW\" TEXT," + // 3: low
                "\"PRICE\" TEXT," + // 4: price
                "\"TIMESTAMP\" INTEGER," + // 5: timestamp
                "\"SNAPSHOT_ID\" INTEGER NOT NULL );"); // 6: snapshotId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SNAPSHOT_CHART\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SnapshotChart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float market = entity.getMarket();
        if (market != null) {
            stmt.bindDouble(2, market);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(3, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(4, low);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp);
        }
        stmt.bindLong(7, entity.getSnapshotId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SnapshotChart entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Float market = entity.getMarket();
        if (market != null) {
            stmt.bindDouble(2, market);
        }
 
        String high = entity.getHigh();
        if (high != null) {
            stmt.bindString(3, high);
        }
 
        String low = entity.getLow();
        if (low != null) {
            stmt.bindString(4, low);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(5, price);
        }
 
        Long timestamp = entity.getTimestamp();
        if (timestamp != null) {
            stmt.bindLong(6, timestamp);
        }
        stmt.bindLong(7, entity.getSnapshotId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SnapshotChart readEntity(Cursor cursor, int offset) {
        SnapshotChart entity = new SnapshotChart( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // market
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // high
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // low
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // timestamp
            cursor.getLong(offset + 6) // snapshotId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SnapshotChart entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMarket(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setHigh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLow(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimestamp(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setSnapshotId(cursor.getLong(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SnapshotChart entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SnapshotChart entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SnapshotChart entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "charts" to-many relationship of Snapshot. */
    public List<SnapshotChart> _querySnapshot_Charts(long snapshotId) {
        synchronized (this) {
            if (snapshot_ChartsQuery == null) {
                QueryBuilder<SnapshotChart> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SnapshotId.eq(null));
                snapshot_ChartsQuery = queryBuilder.build();
            }
        }
        Query<SnapshotChart> query = snapshot_ChartsQuery.forCurrentThread();
        query.setParameter(0, snapshotId);
        return query.list();
    }

}
