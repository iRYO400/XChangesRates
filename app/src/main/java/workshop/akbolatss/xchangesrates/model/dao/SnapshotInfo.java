package workshop.akbolatss.xchangesrates.model.dao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;
import org.greenrobot.greendao.annotation.NotNull;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "SNAPSHOT_INFO".
 */
@Entity(active = true)
public class SnapshotInfo {

    @Id(autoincrement = true)
    private Long id;
    private Float volume;
    private String high;
    private Float change24;
    private String last;
    private String low;
    private String buy;
    private String sell;
    private Float change;
    private String started;
    private String multiply;
    private String updated;
    private Long timestamp;
    private long snapshotId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    /** Used for active entity operations. */
    @Generated(hash = 575439658)
    private transient SnapshotInfoDao myDao;
    @ToOne(joinProperty = "snapshotId")
    private Snapshot snapshot;

    @Generated(hash = 1580118760)
    private transient Long snapshot__resolvedKey;

    

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 12991247)
    public SnapshotInfo() {
    }

    public SnapshotInfo(Long id) {
        this.id = id;
    }

    @Generated(hash = 438700268)
    public SnapshotInfo(Long id, Float volume, String high, Float change24, String last, String low, String buy, String sell, Float change, String started, String multiply, String updated, Long timestamp, long snapshotId) {
        this.id = id;
        this.volume = volume;
        this.high = high;
        this.change24 = change24;
        this.last = last;
        this.low = low;
        this.buy = buy;
        this.sell = sell;
        this.change = change;
        this.started = started;
        this.multiply = multiply;
        this.updated = updated;
        this.timestamp = timestamp;
        this.snapshotId = snapshotId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 576795007)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSnapshotInfoDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Float getVolume() {
        return volume;
    }

    public void setVolume(Float volume) {
        this.volume = volume;
    }

    public String getHigh() {
        return high;
    }

    public void setHigh(String high) {
        this.high = high;
    }

    public Float getChange24() {
        return change24;
    }

    public void setChange24(Float change24) {
        this.change24 = change24;
    }

    public String getLast() {
        return last;
    }

    public void setLast(String last) {
        this.last = last;
    }

    public String getLow() {
        return low;
    }

    public void setLow(String low) {
        this.low = low;
    }

    public String getBuy() {
        return buy;
    }

    public void setBuy(String buy) {
        this.buy = buy;
    }

    public String getSell() {
        return sell;
    }

    public void setSell(String sell) {
        this.sell = sell;
    }

    public Float getChange() {
        return change;
    }

    public void setChange(Float change) {
        this.change = change;
    }

    public String getStarted() {
        return started;
    }

    public void setStarted(String started) {
        this.started = started;
    }

    public String getMultiply() {
        return multiply;
    }

    public void setMultiply(String multiply) {
        this.multiply = multiply;
    }

    public String getUpdated() {
        return updated;
    }

    public void setUpdated(String updated) {
        this.updated = updated;
    }

    public Long getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(Long timestamp) {
        this.timestamp = timestamp;
    }

    public long getSnapshotId() {
        return snapshotId;
    }

    public void setSnapshotId(long snapshotId) {
        this.snapshotId = snapshotId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 124649424)
    public Snapshot getSnapshot() {
        long __key = this.snapshotId;
        if (snapshot__resolvedKey == null || !snapshot__resolvedKey.equals(__key)) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SnapshotDao targetDao = daoSession.getSnapshotDao();
            Snapshot snapshotNew = targetDao.load(__key);
            synchronized (this) {
                snapshot = snapshotNew;
                snapshot__resolvedKey = __key;
            }
        }
        return snapshot;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1147333397)
    public void setSnapshot(@NotNull Snapshot snapshot) {
        if (snapshot == null) {
            throw new DaoException("To-one property 'snapshotId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.snapshot = snapshot;
            snapshotId = snapshot.getId();
            snapshot__resolvedKey = snapshotId;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
