package workshop.akbolatss.xchangesrates.model.dao;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.JoinProperty;
import org.greenrobot.greendao.annotation.ToMany;
import org.greenrobot.greendao.annotation.ToOne;

import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "CHART_DATA".
 */
@Entity(active = true)
public class ChartData {

    @Id(autoincrement = true)
    private Long id;
    private String exchange;
    private String coin;
    private String currency;
    private String source;
    private Boolean isActive;
    private String timing;
    private Boolean isLoading;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ChartDataDao myDao;

    @ToOne(joinProperty = "infoId")
    private ChartDataInfo chartDataInfo;

    @Generated
    private transient Long chartDataInfo__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "chartsId")
    })
    private List<ChartDataCharts> charts;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public ChartData() {
    }

    public ChartData(Long id) {
        this.id = id;
    }

    @Generated
    public ChartData(Long id, String exchange, String coin, String currency, String source, Boolean isActive, String timing, Boolean isLoading) {
        this.id = id;
        this.exchange = exchange;
        this.coin = coin;
        this.currency = currency;
        this.source = source;
        this.isActive = isActive;
        this.timing = timing;
        this.isLoading = isLoading;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChartDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getExchange() {
        return exchange;
    }

    public void setExchange(String exchange) {
        this.exchange = exchange;
    }

    public String getCoin() {
        return coin;
    }

    public void setCoin(String coin) {
        this.coin = coin;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(String currency) {
        this.currency = currency;
    }

    public String getSource() {
        return source;
    }

    public void setSource(String source) {
        this.source = source;
    }

    public Boolean getIsActive() {
        return isActive;
    }

    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }

    public String getTiming() {
        return timing;
    }

    public void setTiming(String timing) {
        this.timing = timing;
    }

    public Boolean getIsLoading() {
        return isLoading;
    }

    public void setIsLoading(Boolean isLoading) {
        this.isLoading = isLoading;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public ChartDataInfo getChartDataInfo() {
        Long __key = chartDataInfo.getId();
        if (chartDataInfo__resolvedKey == null || !chartDataInfo__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ChartDataInfoDao targetDao = daoSession.getChartDataInfoDao();
            ChartDataInfo chartDataInfoNew = targetDao.load(__key);
            synchronized (this) {
                chartDataInfo = chartDataInfoNew;
            	chartDataInfo__resolvedKey = __key;
            }
        }
        return chartDataInfo;
    }

    public ChartDataInfo getInfo() {
        if (chartDataInfo == null) {
            ChartDataInfoDao targetDao = daoSession.getChartDataInfoDao();
            ChartDataInfo chartDataInfoNew = targetDao.load(id);
            synchronized (this) {
                chartDataInfo = chartDataInfoNew;
                chartDataInfo__resolvedKey = id;
            }
            return chartDataInfo;
        } else {
            return getChartDataInfo();
        }
    }

    public boolean isInfoNull() {
        if (chartDataInfo == null) {
            return true;
        } else {
            return false;
        }
    }

    @Generated
    public void setChartDataInfo(ChartDataInfo chartDataInfo) {
        synchronized (this) {
            this.chartDataInfo = chartDataInfo;
            chartDataInfo__resolvedKey = chartDataInfo.getId();
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<ChartDataCharts> getCharts() {
        if (charts == null) {
            __throwIfDetached();
            ChartDataChartsDao targetDao = daoSession.getChartDataChartsDao();
            List<ChartDataCharts> chartsNew = targetDao._queryChartData_Charts(id);
            synchronized (this) {
                if(charts == null) {
                    charts = chartsNew;
                }
            }
        }
        return charts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetCharts() {
        charts = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END


    public void setCharts(List<ChartDataCharts> charts) {
        resetCharts();
        this.charts = charts;
    }
}
